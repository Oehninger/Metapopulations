import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
from scipy import integrate
#Parameters

c=[2.1, 3]
e=[0.3,-0.3,0.5]
m=[0.7,0.2 ]

#Colonization rates function
def c0(t):
    c0= c[0]+e[0]*np.sin(np.sqrt(1)*t*np.pi)+e[1]*np.cos(np.sqrt(2)*t*np.pi)
    return c0

def c1(t):
    c1=c[1]+e[1]*np.sin(np.sqrt(2)*t*np.pi)+e[2]*np.cos(np.sqrt(3)*t*np.pi)
    return c1

#R0=average(m1)/average(c1)
print('R0=',m[0]/c[0])
print('R1=',m[1]/c[1])

#Bifurcation parameter h

h = [0.78 ,0.63, 0.48, 1/3, 0.18, 0.03]

# Function to generate and save image
def generar_imagen(valor_h, indice):
    def pend2(z,t,):
        p1, p2=z
        dzdt=[ c0(t)*p1*(valor_h-p1)-m[0]*p1,
           c1(t)*p2*(valor_h-p1-p2)-m[1]*p2-c0(t)*p1*p2]
        return dzdt
    z20=valor_h*np.array([0.4, 0.3])
    t=np.linspace(0,1000,10001)
    sol2=sp.integrate.odeint(pend2,z20,t)

    t1=np.linspace(0,100,1001)
    
    # Generate the plot
    plt.figure(figsize=(3.5,3.5))
    plt.plot(t1, sol2[0:1001, 0], 'b', label=r"$p_1(t)$")
    plt.plot(t1, sol2[0:1001, 1], 'g', label=r"$p_2(t)$")
    plt.xticks(fontsize=6)
    plt.yticks(fontsize=6)
    plt.legend(loc='best',fontsize=7)
    plt.ylabel('Fraction of inhabitated patches',fontsize=7)
    plt.xlabel('Time',fontsize=7)
    plt.grid()

    # Save the image
    nombre_archivo = f'imagen_h{indice}.eps'
    plt.savefig(nombre_archivo,format='eps')
    plt.show()
    plt.close()
    
    ##Approximation of p1*

    t2=np.linspace(100,1000,9001)

    def p1s(x):
        x_points = t2
        y_points = sol2[1000:90001,0]
    
        tck = sp.interpolate.splrep(x_points, y_points)
        return sp.interpolate.splev(x, tck)

    def p1star(t):
       return c1(t)*p1s(t)
    ##Approximation of R1*
    #R1*=(average(m2)-average(m1))/(average(c2)-average(c1))+average(c2p1*)/(average(c2)-average(c1))
    x = t2
    y1 = p1star(t2)
    I1 = integrate.simpson(y1, x=t2)
    M1star=I1/900
    R1star=(m[1]-m[0])/(c[1]-c[0])+M1star/(c[1]-c[0])
    print(f'imagen_h{indice}.R1*=',R1star)
    

# Cicle to generate the images dependig on h
for i, valor_h in enumerate(h):
    generar_imagen(valor_h, i)
